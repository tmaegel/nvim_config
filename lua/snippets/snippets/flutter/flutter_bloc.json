{
    "Counter Cubit": {
        "prefix": "cubit",
        "body": [
            "class CounterCubit extends Cubit<int> {",
            "\tCounterCubit() : super(0);",
            "",
            "\tvoid increment() => emit(state + 1);",
            "",
            "\t@override",
            "\tvoid onChange(Change<int> change) {",
            "\t\tsuper.onChange(change);",
            "\t\tprint(change);",
            "\t}",
            "",
            "\t@override",
            "\tvoid onError(Object error, StackTrace stackTrace) {",
            "\t\tprint('$error, $stackTrace');",
            "\t\tsuper.onError(error, stackTrace);",
            "\t}",
            "}"
        ],
        "description": "Create a Cubit."
    },
    "Counter Bloc": {
        "prefix": "bloc",
        "body": [
            "sealed class CounterEvent {}",
            "",
            "final class CounterIncrementPressed extends CounterEvent {}",
            "",
            "class CounterBloc extends Bloc<CounterEvent, int> {",
            "\tCounterBloc() : super(0) {",
            "\t\ton<CounterIncrementPressed>((event, emit) {",
            "\t\t\temit(state + 1);",
            "\t\t});",
            "\t}",
            "",
            "\t@override",
            "\tvoid onEvent(CounterEvent event) {",
            "\t\tsuper.onEvent(event);",
            "\t\tprint(event);",
            "\t}",
            "",
            "\t@override",
            "\tvoid onChange(Change<int> change) {",
            "\t\tsuper.onChange(change);",
            "\t\tprint(change);",
            "\t}",
            "",
            "\t@override",
            "\tvoid onTransition(Transition<CounterEvent, int> transition) {",
            "\t\tsuper.onTransition(transition);",
            "\t\tprint(transition);",
            "\t}",
            "",
            "\t@override",
            "\tvoid onError(Object error, StackTrace stackTrace) {",
            "\t\tprint('$error, $stackTrace');",
            "\t\tsuper.onError(error, stackTrace);",
            "\t}",
            "}"
        ],
        "description": "Create a Bloc."
    },
    "Cubit Observer": {
        "prefix": "cubitobs",
        "body": [
            "class SimpleCubitObserver extends BlocObserver {",
            "\t@override",
            "\tvoid onChange(BlocBase bloc, Change change) {",
            "\t\tsuper.onChange(bloc, change);",
            "\t\tprint('${bloc.runtimeType} $change');",
            "\t}",
            "",
            "\t@override",
            "\tvoid onError(BlocBase bloc, Object error, StackTrace stackTrace) {",
            "\t\tprint('${bloc.runtimeType} $error $stackTrace');",
            "\t\tsuper.onError(bloc, error, stackTrace);",
            "\t}",
            "}"
        ],
        "description": "Create a BlocObserver for a cubit."
    },
    "Bloc Observer": {
        "prefix": "blocobs",
        "body": [
            "class SimpleBlocObserver extends BlocObserver {",
            "\t@override",
            "\tvoid onChange(BlocBase bloc, Change change) {",
            "\t\tsuper.onChange(bloc, change);",
            "\t\tprint('${bloc.runtimeType} $change');",
            "\t}",
            "",
            "\t@override",
            "\tvoid onTransition(Bloc bloc, Transition transition) {",
            "\t\tsuper.onTransition(bloc, transition);",
            "\t\tprint('${bloc.runtimeType} $transition');",
            "\t}",
            "",
            "\t@override",
            "\tvoid onError(BlocBase bloc, Object error, StackTrace stackTrace) {",
            "\t\tprint('${bloc.runtimeType} $error $stackTrace');",
            "\t\tsuper.onError(bloc, error, stackTrace);",
            "\t}",
            "}"
        ],
        "description": "Create a BlocObserver for a bloc."
    },
    "BlocBuilder": {
        "prefix": "blocb",
        "body": [
            "BlocBuilder<${1:BlocA}, ${2:BlocState}>(",
            "\tbuilder: (BuildContext context, ${2:BlocState} state) {",
            "\t\t// return widget here based on state",
            "\t}",
            ")"
        ],
        "description": "Create a BlocBuilder."
    },
    "BlocBuilder with local bloc": {
        "prefix": "blocbb",
        "body": [
            "BlocBuilder<${1:BlocA}, ${2:BlocState}>(",
            "\tbloc: ${3:bloc},",
            "\tbuilder: (BuildContext context, ${2:BlocState} state) {",
            "\t\t// return widget here based on state",
            "\t}",
            ")"
        ],
        "description": "Create a BlocBuilder with local bloc."
    },
    "BlocBuilder with buildWhen": {
        "prefix": "blocbbw",
        "body": [
            "BlocBuilder<${1:BlocA}, ${2:BlocState}>(",
            "\tbuildWhen: (${2:BlocState} previousState, ${2:BlocState} state) {",
            "\t\t// return true/false to determine whether or not",
            "\t\t// to rebuild the widget with state",
            "\t},",
            "\tbuilder: (BuildContext context, ${2:BlocState} state) {",
            "\t\t// return widget here based on state",
            "\t}",
            ")"
        ],
        "description": "Create a BlocBuilder with buildWhen."
    },
    "BlocSelector": {
        "prefix": "blocs",
        "body": [
            "BlocSelector<${1:BlocA}, ${2:BlocState}, ${3:SelectedState}>(",
            "\tselector: (state) {",
            "\t\t// return selected state based on the provided state.",
            "\t}",
            "\tbuilder: (BuildContext context, ${2:BlocState} state) {",
            "\t\t// return widget here based on selected state",
            "\t}",
            ")"
        ],
        "description": "Create a BlocSelector."
    }
}
