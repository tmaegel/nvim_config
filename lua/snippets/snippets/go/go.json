{
    "single import": {
        "prefix": "imp",
        "body": "import \"${1:package}\"",
        "description": "Import statement"
    },
    "multiple imports": {
        "prefix": "impb",
        "body": "import (\n\t\"${1:package}\"\n)",
        "description": "Import block"
    },
    "single constant": {
        "prefix": "con",
        "body": "const ${1:name} = ${2:value}",
        "description": "Constant"
    },
    "multiple constants": {
        "prefix": "conb",
        "body": "const (\n\t${1:name} = ${2:value}\n)",
        "description": "Constant block"
    },
    "type function declaration": {
        "prefix": [
            "typef",
            "funct"
        ],
        "body": "type ${1:name} func($3) $4",
        "description": "Type function declaration"
    },
    "type interface declaration": {
        "prefix": [
            "typei",
            "interf"
        ],
        "body": "type ${1:name} interface {\n\t$0\n}",
        "description": "Type interface"
    },
    "type struct declaration": {
        "prefix": [
            "types",
            "struct"
        ],
        "body": "type ${1:name} struct {\n\t$0\n}",
        "description": "Struct declaration"
    },
    "package main and main function": {
        "prefix": [
            "pkgm",
            "packagem"
        ],
        "body": "package main\n\nfunc main() {\n\t$0\n}",
        "description": "Main package & function"
    },
    "function declaration": {
        "prefix": "func",
        "body": "func $1($2) $3 {\n\t$0\n}",
        "description": "Function declaration"
    },
    "variable declaration": {
        "prefix": "var",
        "body": "var ${1:name} ${2:type}",
        "description": "Variable"
    },
    "variables declaration": {
        "prefix": "vars",
        "body": "var (\n\t${1:name} ${2:type} = ${3:value}\n)",
        "description": "Variable"
    },
    "switch statement": {
        "prefix": "switch",
        "body": "switch ${1:expression} {\n\tcase ${2:condition}:\n\t\t$0\n}",
        "description": "Switch statement"
    },
    "select statement": {
        "prefix": "sel",
        "body": "select {\ncase ${1:condition}:\n\t$0\n}",
        "description": "Select statement"
    },
    "case clause": {
        "prefix": "cs",
        "body": "case ${1:condition}:$0",
        "description": "Case clause"
    },
    "for statement": {
        "prefix": "for",
        "body": "for ${1}{\n\t$0\n}",
        "description": "Pure for loop"
    },
    "for n statement": {
        "prefix": "fori",
        "body": "for ${1:i} := ${2:0}; $1 < ${3:count}; $1${4:++} {\n\t$0\n}",
        "description": "For loop"
    },
    "for range statement": {
        "prefix": "forr",
        "body": "for ${1:_, }${2:v} := range ${3:v} {\n\t$0\n}",
        "description": "For range loop"
    },
    "channel declaration": {
        "prefix": "ch",
        "body": "chan ${1:type}",
        "description": "Channel"
    },
    "array declaration (empty)": {
        "prefix": "arr",
        "body": "var array [3]int",
        "description": "Array (empty)"
    },
    "array declaration (values)": {
        "prefix": "arrv",
        "body": "var array = [3]int{10, 20, 30}",
        "description": "Array with values"
    },
    "slice declaration (empty)": {
        "prefix": "sli",
        "body": "var slice []int",
        "description": "Slice (empty)"
    },
    "slice declaration (values)": {
        "prefix": "sliv",
        "body": "var slice = []int{10, 20, 30}",
        "description": "Slice with values"
    },
    "map declaration (nil)": {
        "prefix": "mapn",
        "body": "var nilMap map[string]int",
        "description": "Map (nil)"
    },
    "map declaration (empty)": {
        "prefix": "mape",
        "body": "emptyMap := map[string]int{}",
        "description": "Map (empty)"
    },
    "empty interface": {
        "prefix": "in",
        "body": "interface{}",
        "description": "Empty interface"
    },
    "if statement": {
        "prefix": "if",
        "body": "if ${1:condition} {\n\t$0\n}",
        "description": "If statement"
    },
    "else branch": {
        "prefix": "el",
        "body": "else {\n\t$0\n}",
        "description": "Else branch"
    },
    "if else statement": {
        "prefix": "ife",
        "body": "if ${1:condition} {\n\t$2\n} else {\n\t$0\n}",
        "description": "If else"
    },
    "if err != nil": {
        "prefix": "ir",
        "body": "if err != nil {\n\t${1:return ${2:nil, }${3:err}}\n}",
        "description": "if err != nil"
    },
    "fmt.Print": {
        "prefix": [
            "fp",
            "print"
        ],
        "body": "fmt.Print(\"$1\")",
        "description": "fmt.Print()"
    },
    "fmt.Println": {
        "prefix": [
            "fpln",
            "println"
        ],
        "body": "fmt.Println(\"$1\")",
        "description": "fmt.Println()"
    },
    "fmt.Printf": {
        "prefix": [
            "fpf",
            "printf"
        ],
        "body": "fmt.Printf(\"$1\", ${2:var})",
        "description": "fmt.Printf()"
    },
    "fmt.Sprintf": {
        "prefix": [
            "fspf",
            "sprintf"
        ],
        "body": "fmt.Sprintf(\"$1\", ${2:var})",
        "description": "fmt.Sprintf()"
    },
    "log.Println": {
        "prefix": [
            "lpln",
            "lprintln"
        ],
        "body": "log.Println(\"$1\")",
        "description": "log.Println()"
    },
    "log.Printf": {
        "prefix": [
            "lpf",
            "lprintf"
        ],
        "body": "log.Printf(\"$1\", ${2:var})",
        "description": "log.Printf()"
    },
    "log variable content": {
        "prefix": "lv",
        "body": "log.Printf(\"${1:var}: %#+v\\\\n\", ${1:var})",
        "description": "log.Printf() with variable content"
    },
    "t.Log": {
        "prefix": "tl",
        "body": "t.Log(\"$1\")",
        "description": "t.Log()"
    },
    "t.Logf": {
        "prefix": "tlf",
        "body": "t.Logf(\"$1\", ${2:var})",
        "description": "t.Logf()"
    },
    "t.Logf variable content": {
        "prefix": "tlv",
        "body": "t.Logf(\"${1:var}: %#+v\\\\n\", ${1:var})",
        "description": "t.Logf() with variable content"
    },
    "make(...)": {
        "prefix": "make",
        "body": "make(${1:type}, ${2:0})",
        "description": "Make statement"
    },
    "new(...)": {
        "prefix": "new",
        "body": "new(${1:type})",
        "description": "New statement"
    },
    "panic(...)": {
        "prefix": "pn",
        "body": "panic(\"$0\")",
        "description": "Panic"
    },
    "http ResponseWriter *Request": {
        "prefix": "wr",
        "body": "${1:w} http.ResponseWriter, ${2:r} *http.Request",
        "description": "Http Response"
    },
    "http.HandleFunc": {
        "prefix": "hf",
        "body": "${1:http}.HandleFunc(\"${2:/}\", ${3:handler})",
        "description": "http.HandleFunc()"
    },
    "http handler declaration": {
        "prefix": "hand",
        "body": "func $1(${2:w} http.ResponseWriter, ${3:r} *http.Request) {\n\t$0\n}",
        "description": "Http handler declaration"
    },
    "http.Redirect": {
        "prefix": "rd",
        "body": "http.Redirect(${1:w}, ${2:r}, \"${3:/}\", ${4:http.StatusFound})",
        "description": "http.Redirect()"
    },
    "http.Error": {
        "prefix": "herr",
        "body": "http.Error(${1:w}, ${2:err}.Error(), ${3:http.StatusInternalServerError})",
        "description": "http.Error()"
    },
    "http.ListenAndServe": {
        "prefix": "las",
        "body": "http.ListenAndServe(\"${1::8080}\", ${2:nil})",
        "description": "http.ListenAndServe"
    },
    "http.Serve": {
        "prefix": "sv",
        "body": "http.Serve(\"${1::8080}\", ${2:nil})",
        "description": "http.Serve"
    },
    "goroutine anonymous function": {
        "prefix": "go",
        "body": "go func($1) {\n\t$0\n}($2)",
        "description": "Anonymous goroutine declaration"
    },
    "goroutine function": {
        "prefix": "gf",
        "body": "go ${1:func}($0)",
        "description": "Goroutine declaration"
    },
    "defer statement": {
        "prefix": "df",
        "body": "defer ${1:func}($0)",
        "description": "Defer statement"
    },
    "test function": {
        "prefix": "tf",
        "body": "func Test$1(t *testing.T) {\n\t$0\n}",
        "description": "Test function"
    },
    "test main": {
        "prefix": "tm",
        "body": "func TestMain(m *testing.M) {\n\t$1\n\n\tos.Exit(m.Run())\n}",
        "description": "TestMain function"
    },
    "benchmark function": {
        "prefix": "bf",
        "body": "func Benchmark$1(b *testing.B) {\n\tfor ${2:i} := 0; ${2:i} < b.N; ${2:i}++ {\n\t\t$0\n\t}\n}",
        "description": "Benchmark function"
    },
    "example function": {
        "prefix": "ef",
        "body": "func Example$1() {\n\t$2\n\t//Output:\n\t$3\n}",
        "description": "Example function"
    },
    "table driven test": {
        "prefix": "tdt",
        "body": "func Test$1(t *testing.T) {\n\ttestCases := []struct {\n\t\tdesc\tstring\n\t\t$2\n\t}{\n\t\t{\n\t\t\tdesc: \"$3\",\n\t\t\t$4\n\t\t},\n\t}\n\tfor _, tC := range testCases {\n\t\tt.Run(tC.desc, func(t *testing.T) {\n\t\t\t$0\n\t\t})\n\t}\n}",
        "description": "Table driven test"
    },
    "init function": {
        "prefix": "finit",
        "body": "func init() {\n\t$1\n}",
        "description": "Init function"
    },
    "main function": {
        "prefix": "fmain",
        "body": "func main() {\n\t$1\n}",
        "description": "Main function"
    },
    "method declaration": {
        "prefix": [
            "meth",
            "fum"
        ],
        "body": "func (${1:receiver} ${2:type}) ${3:method}($4) $5 {\n\t$0\n}",
        "description": "Method declaration"
    },
    "hello world web app": {
        "prefix": "helloweb",
        "body": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"time\"\n)\n\nfunc greet(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, \"Hello World! %s\", time.Now())\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/\", greet)\n\thttp.ListenAndServe(\":8080\", nil)\n}",
        "description": "Hello world webapp"
    },
    "sort implementation": {
        "prefix": "sort",
        "body": "type ${1:SortBy} []${2:Type}\n\nfunc (a $1) Len() int           { return len(a) }\nfunc (a $1) Swap(i, j int)      { a[i], a[j] = a[j], a[i] }\nfunc (a $1) Less(i, j int) bool { ${3:return a[i] < a[j]} }",
        "description": "Custom sort.Sort interface implementation, for a given slice type."
    },
    "json tag": {
        "prefix": "json",
        "body": "`json:\"$1\"`",
        "description": "Struct json tag"
    },
    "xml tag": {
        "prefix": "xml",
        "body": "`xml:\"$1\"`",
        "description": "Struct xml tag"
    },
    "if key in a map": {
        "prefix": "om",
        "body": "if ${1:value}, ok := ${2:map}[${3:key}]; ok {\n\t$4\n}"
    }
}
