{
    "lambda": {
        "prefix": "lambda",
        "body": [
            "lambda ${1:parameter_list}: ${2:expression}"
        ],
        "description": "Lambda statement"
    },
    "decorator (no @wraps)": {
        "prefix": "decf",
        "body": [
            "def ${0:decorator}(f):",
            "\tdef _wrapper(*args, **kwargs):",
            "\t\tprint(\"Calling decorated function\")",
            "\t\treturn f(*args, **kwargs)",
            "\treturn _wrapper"
        ],
        "description": "Regular decorator function"
    },
    "decorator (with @wraps)": {
        "prefix": "decfw",
        "body": [
            "from functools import wraps",
            "def ${0:decorator}(f):",
            "\t@wraps(f)",
            "\tdef _wrapper(*args, **kwargs):",
            "\t\tprint(\"Calling decorated function\")",
            "\t\treturn f(*args, **kwargs)",
            "\treturn _wrapper"
        ],
        "description": "Decorator function with @wraps"
    },
    "with": {
        "prefix": "with",
        "body": [
            "with ${1:expr} as ${2:target}:",
            "\t${3:pass}"
        ],
        "description": "with statement"
    },
    "async/with": {
        "prefix": "awith",
        "body": [
            "async with ${1:expr} as ${2:target}:",
            "\t${3:pass}"
        ],
        "description": "async with statement"
    },
    "self": {
        "prefix": ".",
        "body": "self.$0",
        "description": "reference the self property in an object"
    }
}
